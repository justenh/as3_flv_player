package com.fse.media.video {		import flash.display.Loader;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.ErrorEvent;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.MouseEvent;	import flash.events.NetStatusEvent;	import flash.events.ProgressEvent;	import flash.geom.Rectangle;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundTransform;	import flash.media.Video;	import flash.net.NetConnection;	import flash.net.NetStream;	import flash.net.URLRequest;		/**	 * ...	 * 	 * @author Justen Holter	 */	public class FLVPlayer extends Sprite {				public static const PLAYHEAD_PROGRESS	:String = "FLVPlayer.PLAYHEAD_PROGRESS";		public static const LOAD_PROGRESS		:String = "FLVPlayer.LOAD_PROGRESS";		public static const BUFFER_PROGRESS		:String = "FLVPlayer.BUFFER_PROGRESS";		public static const NS_PLAY_START		:String = "NetStream.Play.Start";		public static const NS_PLAY_STOP		:String = "NetStream.Play.Stop";				private var _ns					:NetStream;		private var _nc					:NetConnection;		private var _video				:Video;		private var _sound				:SoundChannel;		private var _videoData			:Object;		private var _isPaused			:Boolean;		private var _playHeadProgress	:Number;		private var _loadProgress		:Number;		private var _bufferTime			:Number;		private var _videoURL			:String;		private var _volume				:Number;				/////////////////////////////////////////////////////////////////////////////////////////////		// GETTERS AND SETTERS		/////////////////////////////////////////////////////////////////////////////////////////////				public function get volume():Number {			return _volume;		}				public function set volume(value:Number):void {						_volume = value;						if(_ns != null)				_ns.soundTransform = new SoundTransform(value);		}				public function get playheadProgress():Number {			return _playHeadProgress;		}				public function get loadProgress():Number {			return _loadProgress;		}				public function get videoHeight():Number {			return _video.height;		}				public function set videoHeight(value:Number):void {			_video.height = value;		}				public function get videoWidth():Number {			return _video.width;		}				public function set videoWidth(value:Number):void {			_video.width = value;		}				/////////////////////////////////////////////////////////////////////////////////////////////		// CONSTRUCTOR		/////////////////////////////////////////////////////////////////////////////////////////////				public function FLVPlayer(videoWidth:Number = 720, videoHeight:Number = 480, bufferTime:Number = 3) {						_volume = 1;			_playHeadProgress = 0;			_loadProgress = 0;			_bufferTime = bufferTime;						_video = new Video(videoWidth, videoHeight);			_video.smoothing = true;			addChild(_video);		}				/////////////////////////////////////////////////////////////////////////////////////////////		// PRIVATE FUNCTONS		/////////////////////////////////////////////////////////////////////////////////////////////				private function progressEnterFrame(event:Event):void {						if(_videoData != null){								var newProgress:Number = roundToNearestDecimal(_ns.time / _videoData.duration, 1000);				var newLoadProgress:Number = roundToNearestDecimal(_ns.bytesLoaded / _ns.bytesTotal, 1000);				var isChanged:Boolean = newProgress != _playHeadProgress || newLoadProgress != _loadProgress;								//check the load progress				if(newLoadProgress != _loadProgress){					_loadProgress = Math.min(1, newLoadProgress);					dispatchEvent( new Event(LOAD_PROGRESS) );				}								//check the playhead progress				if(newProgress != _playHeadProgress){										_playHeadProgress =  Math.min(1, newProgress);					dispatchEvent( new Event(PLAYHEAD_PROGRESS) );										//there is an issue that prevents this from always					//returning 1 for playhead progress.					if(_playHeadProgress >= 1){						dispatchEvent( new Event(Event.COMPLETE) );						removeEventListener(Event.ENTER_FRAME, progressEnterFrame);					}				}								if(isChanged)					dispatchEvent( new Event(Event.CHANGE) );			}		}				private function roundToNearestDecimal(input:Number, decimalPlace:Number):Number {			return Math.floor(input * decimalPlace) / decimalPlace;		}				/////////////////////////////////////////////////////////////////////////////////////////////		/////////////////////////////////////////////////////////////////////////////////////////////				private function connectStream():void {						_ns = new NetStream(_nc);			_ns.bufferTime = _bufferTime;			_ns.client = {onMetaData:netStreamMetaData};			_ns.addEventListener(NetStatusEvent.NET_STATUS, netStreamStatus);			_ns.addEventListener(IOErrorEvent.IO_ERROR, netStreamError);			_ns.play(_videoURL);			_ns.soundTransform = new SoundTransform(_volume);						_video.attachNetStream(_ns);		}				private function netStreamStatus(event:NetStatusEvent):void {			switch(event.info.code){				case "NetStream.Play.StreamNotFound":									dispatchEvent(new ErrorEvent(ErrorEvent.ERROR, false, false, "Stream Not Found"));					break;								case NS_PLAY_START :					dispatchEvent(new Event("start"));					addEventListener(Event.ENTER_FRAME, progressEnterFrame);					break;			}		}				private function netStreamError(event:ErrorEvent):void {			dispatchEvent(event.clone());		}				private function netStreamMetaData(meta:Object):void {			_videoData = meta;		}				/////////////////////////////////////////////////////////////////////////////////////////////		// PUBLIC FUNCTONS		/////////////////////////////////////////////////////////////////////////////////////////////				public function play(video:String, rtmp:String = null):void {						_isPaused = false;			_playHeadProgress = 0;			_loadProgress = 0;						if(_nc != null || _ns != null)				unload();						_nc = new NetConnection();			_nc.connect(rtmp);						if(rtmp != null)				_nc.client = {onBWDone:connectStream};						_videoURL = video;						if(rtmp == null)				connectStream();		}				public function pause():void {						if(_ns != null){								_isPaused = true;				_ns.pause();								removeEventListener(Event.ENTER_FRAME, progressEnterFrame);			}		}				public function resume():void {						//if we are at the end of the video play from			//the begining. This only works if the duration			//property is provided with the videos meta info.						if(_videoData != null){								if(Math.round(_ns.time) == Math.round(_videoData.duration))					_ns.seek(0);			}						//try/catch for resume. Sometimes it throws an error			//if the video is not loaded.						try{ _ns.resume() }catch(error:Error){ return }						_isPaused = false;			addEventListener(Event.ENTER_FRAME, progressEnterFrame);		}				public function seek(time:Number):void {						if(_ns != null){				_ns.seek(time * _videoData.duration);				_ns.resume();				_playHeadProgress = time;				dispatchEvent(new Event(Event.CHANGE));			}		}				public function unload():void {						if(_nc != null){				_nc.close();				_nc = null;				}						if(_ns != null){				_ns.pause();				_ns.close();				_ns = null;			}						removeEventListener(Event.ENTER_FRAME, progressEnterFrame);		}	}}